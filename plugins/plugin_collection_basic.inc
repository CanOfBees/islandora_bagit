<?php

/**
 * @file
 * Plugin for the Islandora BagIt Drupal module.
 *
 * Simple placeholder with no functionality.
 */

/**
 * Returns an array of source and destination file paths. Returns FALSE if no 
 * datastream files are present.
 *
 * @param object $islandora_object
 *   The Islandora object to create a Bag for.
 * 
 * @param array $files_to_add
 *   The list of files generated by the object plugins.
 * 
 * @param string $tmp_ds_directory
 *  The temporary directory where the datastream files have been downloaded.
 * 
 * @return string
 */
function islandora_bagit_plugin_collection_basic_init($islandora_object, $files_to_add, $tmp_ds_directory) {
/*
 * Collection plugins create object-level directories (or hierarchical
 * groups of them) but allow object plugins to arrange datastream
 * and other files as they normally would within those directories.
 * For example, in order to achieve this sort of output arrangement:
 *
 * mybag/
 *   data/
 *      object_89/
 *       object_90/
 *       object_91/
 *           DS1.tif
 *           DS2.jpg
 *           DS3.xml
 *           somefile.xml
 *       object_92/
 *
 * a collection plugin would need to create an object-level directory
 * in $tmp_ds_directory and then pass back to the main module the
 * $files_to_add array containing the new filepaths.
 * 
 * To do this, each collection plugin should be called once
 * per object and take as a paramter the returned $files_to_add array
 * after it has been passed through all object plugins. They would then 
 * prepend path information (like 'object_91' in this example) to the
 * 'dest' value.
 *
 * Also, collection plugins must create any directories in $tmp_ds_directory
 * that are part of the destination path for datastream files and then
 * move them into the new directories.
 */
  
  // Sanitize the PID so it can be used in file paths.
  $clean_pid = str_replace(array(':','-'), '_', $islandora_object->id);
  
  // This plugin creates a directory for each object in the batch in
  // $tmp_ds_directory which parallels the arrangement illustrated above.
  $object_dir = $tmp_ds_directory . DIRECTORY_SEPARATOR . $clean_pid;
  // Create the object-level directory.
  if (!file_exists($object_dir)) {
    mkdir($object_dir, 0777, TRUE);
  }  
  
  // For each of the files in $files_to_add, 1) move each file from its
  // original location to the new object-level directories and 2) modify
  // the $files_to_add array so that the source and dest include the
  // object-level directories.
  foreach ($files_to_add as &$file) {
      // Move the file from $source to $object_dir . basename($source)
      rename ($file['source'], $object_dir . DIRECTORY_SEPARATOR . basename($file['source']));
      // Modify the source and destination paths for each file so they can be
      // passed back to the main module to be added to the Bag.
      $file['source'] = $object_dir . DIRECTORY_SEPARATOR . basename($file['source']);
      $file['dest'] = $clean_pid . DIRECTORY_SEPARATOR . basename($file['source']);
  }
  
  return $files_to_add;
}

